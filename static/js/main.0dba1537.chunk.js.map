{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","key","id","onClick","content","AddTodo","state","filter","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","App","todoToShow","Math","random","updateTodoToShow","s","complete","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAqBeA,EAnBH,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,WACXC,EAAWF,EAAMG,OACnBH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,UAAW,kBAAkBC,IAAKF,EAAKG,IAC1C,0BAAMC,QAAS,kBAAIR,EAAWI,EAAKG,MAAMH,EAAKK,aAK3D,uBAAGJ,UAAU,UAAb,4BAED,OACI,yBAAKA,UAAW,oBACZJ,ICwBGS,E,2MArCXC,MAAM,CACFZ,MAAM,GACNa,OAAO,MACPH,QAAQ,I,EAGZI,aAAc,SAACC,GACX,EAAKC,SAAS,CACVN,QAASK,EAAEE,OAAOC,S,EAI1BC,aAAc,SAACJ,GACXA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKV,OACxB,EAAKI,SAAS,CACVN,QAAQ,M,wEAMZ,OACI,6BACI,0BAAMa,SAAUC,KAAKL,cACjB,gDACA,2BAAOM,KAAK,OAAOC,SAAUF,KAAKV,aAAcI,MAAOM,KAAKZ,MAAMF,gB,GA3BhEiB,aCwEPC,E,2MArEbhB,MAAM,CACJiB,WAAW,MACXhB,OAAO,MACPb,MAAM,CACJ,CAACQ,GAAG,EAAGE,QAAQ,iBACf,CAACF,GAAG,EAAGE,QAAQ,yB,EAInBT,WAAW,SAACO,GACV,IAAMR,EAAO,EAAKY,MAAMZ,MAAMa,QAAO,SAAAR,GACnC,OAAOA,EAAKG,KAAOA,KAErB,EAAKQ,SAAS,CACZhB,W,EAIJsB,QAAQ,SAACjB,GACPA,EAAKG,GAAGsB,KAAKC,SACb,IAAI/B,EAAM,GAAD,mBAAK,EAAKY,MAAMZ,OAAhB,CAAuBK,IAChC,EAAKW,SAAS,CACZhB,W,EAKJgC,iBAAiB,SAACC,GACd,EAAKjB,SAAS,CACVa,WAAWI,K,wEAIT,IAAD,OAeP,MAZ8B,QAA1BT,KAAKZ,MAAMiB,WACJL,KAAKZ,MAAMZ,MAGa,cAA1BwB,KAAKZ,MAAMiB,WACVL,KAAKZ,MAAMZ,MAAMa,QAAO,SAAAR,GAAI,OAAGA,EAAK6B,YAGX,cAA1BV,KAAKZ,MAAMiB,YACTL,KAAKZ,MAAMZ,MAAMa,QAAO,SAAAR,GAAI,OAAGA,EAAK6B,YAI7C,yBAAK5B,UAAU,sBACb,wBAAIA,UAAU,oBAAd,cACA,8DACA,kBAAC,EAAD,CAAON,MAAOwB,KAAKZ,MAAMZ,MAAOC,WAAYuB,KAAKvB,aACjD,kBAAC,EAAD,CAASqB,QAASE,KAAKF,UAEvB,uDAA6BE,KAAKZ,MAAMZ,MAAMa,QAAO,SAAAR,GAAI,OAAIA,EAAK6B,YAAU/B,QAG5E,iCAAM,4BAAQM,QAAS,kBAAI,EAAKuB,iBAAiB,SAA3C,OACE,4BAAQvB,QAAS,kBAAI,EAAKuB,iBAAiB,eAA3C,aACA,4BAAQvB,QAAS,kBAAI,EAAKuB,iBAAiB,eAA3C,mB,GA7DEL,aCQEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0dba1537.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Todos=({todos, deleteTodo})=>{\r\n    const todoList = todos.length ? (\r\n        todos.map(todo=>{\r\n            return(\r\n                <div className= \"collection.item\" key={todo.id}>\r\n                  <span onClick={()=>deleteTodo(todo.id)}>{todo.content}</span>  \r\n                </div>\r\n            )\r\n        }) \r\n        ) : (\r\n     <p className=\"center\"> No tasks left to do :) </p>)\r\n\r\n    return(\r\n        <div className =\"todos collection\">\r\n           {todoList} \r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Todos","import React, {Component} from 'react'\r\n\r\nclass AddTodo extends Component{\r\n    state={\r\n        todos:[],\r\n        filter:\"all\",\r\n        content:''\r\n\r\n    }\r\n    handleChange= (e)=>{\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit= (e)=>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state);\r\n        this.setState({\r\n            content:''\r\n        })\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label > Add new task</label>\r\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.content}/>\r\n                </form>\r\n            </div>\r\n\r\n            \r\n           \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo","import React,{Component} from 'react';\nimport Todos from './Todos'\nimport AddTodo from './AddTodo'\n\nclass App extends Component{\n  state={\n    todoToShow:\"all\",\n    filter:\"all\",\n    todos:[\n      {id:1, content:'Find energon '},\n      {id:2, content:'Defeat decepticons '}\n    ]\n  }\n\n  deleteTodo=(id)=>{\n    const todos= this.state.todos.filter(todo=>{\n      return todo.id !== id\n    });\n    this.setState({\n      todos\n    })\n  }\n\n  addTodo=(todo)=>{\n    todo.id=Math.random();\n    let todos=[...this.state.todos, todo];\n    this.setState({\n      todos\n    })\n\n  }\n\n  updateTodoToShow=(s)=>{\n      this.setState({\n          todoToShow:s\n      })\n\n  }\n  render() {\n    let todos = [];\n\n    if (this.state.todoToShow === 'all'){\n        todos= this.state.todos;\n    }\n\n    else if (this.state.todoToShow === 'remaining'){\n       todos= this.state.todos.filter(todo=>!todo.complete);\n    }\n\n    else if (this.state.todoToShow === 'completed'){\n        todos= this.state.todos.filter(todo=> todo.complete);\n     }\n\n    return (\n      <div className=\"todo-app container\">\n        <h1 className=\"center pink-text\">To-do List</h1>\n        <p>Click to remove completed tasks</p>\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo}/>\n        <AddTodo addTodo={this.addTodo}/>  \n\n        <div>number of tasks left : {this.state.todos.filter(todo=> !todo.complete).length}\n           </div>\n\n        <div> <button onClick={()=>this.updateTodoToShow(\"all\")}>all</button>\n                <button onClick={()=>this.updateTodoToShow(\"remaining\")}>remaining</button>\n                <button onClick={()=>this.updateTodoToShow(\"completed\")}>completed</button></div>\n\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}